#!/usr/bin/env python3
"""
Network Discovery Script for NEMO Tool Display
Helps find MQTT broker and configure network settings
"""

import socket
import subprocess
import json
import platform
from typing import List, Dict

def get_local_ip() -> str:
    """Get the local IP address"""
    try:
        # Connect to a remote address to determine local IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
        return local_ip
    except Exception:
        return "127.0.0.1"

def scan_network_for_mqtt(base_ip: str, port: int = 1883) -> List[Dict]:
    """Scan network for MQTT brokers"""
    print(f"Scanning network {base_ip}/24 for MQTT brokers on port {port}...")
    
    # Get network base (e.g., 192.168.1.0 from 192.168.1.100)
    network_base = ".".join(base_ip.split(".")[:-1])
    
    mqtt_servers = []
    
    for i in range(1, 255):
        ip = f"{network_base}.{i}"
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            result = sock.connect_ex((ip, port))
            sock.close()
            
            if result == 0:
                # Try to get hostname
                try:
                    hostname = socket.gethostbyaddr(ip)[0]
                except:
                    hostname = "Unknown"
                
                mqtt_servers.append({
                    "ip": ip,
                    "hostname": hostname,
                    "port": port
                })
                print(f"Found MQTT broker: {ip} ({hostname})")
                
        except Exception:
            continue
    
    return mqtt_servers

def test_mqtt_connection(ip: str, port: int = 1883) -> bool:
    """Test MQTT connection"""
    try:
        import paho.mqtt.client as mqtt
        
        def on_connect(client, userdata, flags, rc):
            client.connected = (rc == 0)
        
        client = mqtt.Client()
        client.on_connect = on_connect
        client.connected = False
        
        client.connect(ip, port, 5)
        client.loop_start()
        
        import time
        time.sleep(2)
        
        client.loop_stop()
        client.disconnect()
        
        return client.connected
    except Exception as e:
        print(f"MQTT connection test failed: {e}")
        return False

def generate_config(local_ip: str, mqtt_ip: str) -> str:
    """Generate configuration file"""
    config = f"""# NEMO Tool Display Configuration
# Generated by network discovery

# API Configuration
API_URL=http://localhost:8000/api/tools
API_KEY=your_api_key_here

# MQTT Configuration (LAN Distribution)
MQTT_BROKER={mqtt_ip}
MQTT_PORT=1883
MQTT_USERNAME=
MQTT_PASSWORD=

# Polling Configuration
POLL_INTERVAL=30

# Network Configuration
BIND_ADDRESS=0.0.0.0
LOCAL_IP={local_ip}
"""
    return config

def main():
    print("NEMO Tool Display - Network Discovery")
    print("=" * 40)
    
    # Get local IP
    local_ip = get_local_ip()
    print(f"Local IP: {local_ip}")
    
    # Scan for MQTT brokers
    mqtt_servers = scan_network_for_mqtt(local_ip)
    
    if not mqtt_servers:
        print("No MQTT brokers found on the network.")
        print("You may need to:")
        print("1. Start an MQTT broker (mosquitto)")
        print("2. Check firewall settings")
        print("3. Verify the broker is running on port 1883")
        return
    
    print(f"\nFound {len(mqtt_servers)} potential MQTT broker(s):")
    for i, server in enumerate(mqtt_servers):
        print(f"{i+1}. {server['ip']} ({server['hostname']})")
    
    # Test connections
    print("\nTesting MQTT connections...")
    working_servers = []
    for server in mqtt_servers:
        print(f"Testing {server['ip']}...", end=" ")
        if test_mqtt_connection(server['ip']):
            print("✓ Working")
            working_servers.append(server)
        else:
            print("✗ Failed")
    
    if not working_servers:
        print("\nNo working MQTT brokers found.")
        return
    
    # Generate configuration
    if len(working_servers) == 1:
        mqtt_ip = working_servers[0]['ip']
        print(f"\nUsing MQTT broker: {mqtt_ip}")
    else:
        print(f"\nMultiple working MQTT brokers found. Using: {working_servers[0]['ip']}")
        mqtt_ip = working_servers[0]['ip']
    
    config_content = generate_config(local_ip, mqtt_ip)
    
    # Write configuration file
    with open('.env', 'w') as f:
        f.write(config_content)
    
    print(f"\nConfiguration written to .env")
    print("You can now start the NEMO server with: python main.py")

if __name__ == "__main__":
    main()
